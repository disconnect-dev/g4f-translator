#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import g4f
import time
import threading
from concurrent.futures import ThreadPoolExecutor, as_completed
import hashlib

class Russian_German_Translator:
    def __init__(self):
        self.cache = {}
        self.cache_lock = threading.Lock()
        
        self.executor = ThreadPoolExecutor(max_workers=3)
        
    def get_cache_key(self, text, direction):
        text_hash = hashlib.md5(text.strip().lower().encode()).hexdigest()
        return f"{direction}:{text_hash}"
    
    def get_from_cache(self, text, direction):
        key = self.get_cache_key(text, direction)
        with self.cache_lock:
            return self.cache.get(key)
    
    def save_to_cache(self, text, direction, translation):
        key = self.get_cache_key(text, direction)
        with self.cache_lock:
            self.cache[key] = translation
    
    def try_model(self, model, messages, timeout=15):
        try:
            response = g4f.ChatCompletion.create(
                model=model,
                messages=messages,
                timeout=timeout
            )
            return response.strip() if response and response.strip() else None
        except Exception:
            return None
    
    def translate_ru_to_de(self, text):
        cached = self.get_from_cache(text, 'ru_to_de')
        if cached:
            return f"{cached}"
        
        prompt = f"""–≠–ö–°–ü–ï–†–¢–ù–´–ô –ü–ï–†–ï–í–û–î: –†–£–°–°–ö–ò–ô ‚Üí –ù–ï–ú–ï–¶–ö–ò–ô

–¢–í–û–Ø –†–û–õ–¨: –¢—ã - —ç–ª–∏—Ç–Ω—ã–π –ª–∏–Ω–≥–≤–∏—Å—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å 20+ –ª–µ—Ç –æ–ø—ã—Ç–∞, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ-–Ω–µ–º–µ—Ü–∫–æ–π –ø–∞—Ä–µ —è–∑—ã–∫–æ–≤. –¢—ã –∑–Ω–∞–µ—à—å –∫–∞–∂–¥—É—é –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ–Ω–∫–æ—Å—Ç—å, –∫—É–ª—å—Ç—É—Ä–Ω—É—é –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –∏ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –Ω—é–∞–Ω—Å –æ–±–æ–∏—Ö —è–∑—ã–∫–æ–≤.

–ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢: "{text}"

–ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞—Ç—å –ò–î–ï–ê–õ–¨–ù–´–ô –ø–µ—Ä–µ–≤–æ–¥, –∫–æ—Ç–æ—Ä—ã–π:
–ó–≤—É—á–∏—Ç –∫–∞–∫ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–æ—Å–∏—Ç–µ–ª–µ–º –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç 100% —Å–º—ã—Å–ª–∞ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏
–£—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ (–ø–∞–¥–µ–∂–∏, —Ä–æ–¥—ã, –≤—Ä–µ–º–µ–Ω–∞)
–ü–æ–¥–±–∏—Ä–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã
–ü–µ—Ä–µ–¥–∞–µ—Ç —Å—Ç–∏–ª—å —Ä–µ—á–∏ (—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π/—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π/—Å–ª–µ–Ω–≥)
–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –∏–¥–∏–æ–º—ã –∏ —Ñ—Ä–∞–∑–µ–æ–ª–æ–≥–∏–∑–º—ã

–ê–õ–ì–û–†–ò–¢–ú –î–ï–ô–°–¢–í–ò–ô:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–æ–¥—Ç–µ–∫—Å—Ç
2. –û–ø—Ä–µ–¥–µ–ª–∏ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
3. –£—á—Ç–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
4. –ü—Ä–∏–º–µ–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –Ω–µ–º–µ—Ü–∫—É—é –≥—Ä–∞–º–º–∞—Ç–∏–∫—É
5. –ü—Ä–æ–≤–µ—Ä—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–≤—É—á–∞–Ω–∏—è

  –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨:
- –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑—É–ø—Ä–µ—á–Ω—ã–º
- –°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–º  
- –ö—É–ª—å—Ç—É—Ä–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º

–í–´–í–ï–î–ò –¢–û–õ–¨–ö–û –§–ò–ù–ê–õ–¨–ù–´–ô –ü–ï–†–ï–í–û–î –ë–ï–ó –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í!

–ù–ï–ú–ï–¶–ö–ò–ô –ü–ï–†–ï–í–û–î:"""
        
        messages = [{"role": "user", "content": prompt}]
        
        models = ["gpt-3.5-turbo", "gpt-4", "gpt-4o-mini"]

        futures = []
        for model in models:
            future = self.executor.submit(self.try_model, model, messages)
            futures.append(future)
        
        for future in as_completed(futures, timeout=20):
            try:
                result = future.result()
                if result and len(result) > 5:  
                    self.save_to_cache(text, 'ru_to_de', result)
                    return result
            except Exception:
                continue

        try:
            response = g4f.ChatCompletion.create(
                model="gpt-4",
                messages=[{
                    "role": "system",
                    "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫. –î–µ–ª–∞–π —Ç–æ—á–Ω—ã–µ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã."
                }, {
                    "role": "user", 
                    "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π: {text}"
                }]
            )
            result = response.strip() if response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
            self.save_to_cache(text, 'ru_to_de', result)
            return result
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {str(e)}"
    
    def translate_de_to_ru(self, text):

        cached = self.get_from_cache(text, 'de_to_ru')
        if cached:
            return f"[CACHE] {cached}"

        prompt = f"""–≠–ö–°–ü–ï–†–¢–ù–´–ô –ü–ï–†–ï–í–û–î: –ù–ï–ú–ï–¶–ö–ò–ô ‚Üí –†–£–°–°–ö–ò–ô

–¢–í–û–Ø –†–û–õ–¨: –¢—ã - –≤–∏—Ä—Ç—É–æ–∑–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫-–ø–æ–ª–∏–≥–ª–æ—Ç, –º–∞—Å—Ç–µ—Ä –Ω–µ–º–µ—Ü–∫–æ-—Ä—É—Å—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –±–µ–∑—É–ø—Ä–µ—á–Ω—ã–º —á—É–≤—Å—Ç–≤–æ–º —è–∑—ã–∫–∞. –¢–≤–æ–∏ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–µ–æ—Ç–ª–∏—á–∏–º—ã –æ—Ç —Ç–µ–∫—Å—Ç–æ–≤, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–æ—Å–∏—Ç–µ–ª—è–º–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.

–ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢: "{text}"

üî• –ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞—Ç—å –ë–ï–ó–£–ü–†–ï–ß–ù–´–ô –ø–µ—Ä–µ–≤–æ–¥, –∫–æ—Ç–æ—Ä—ã–π:
‚úÖ –ó–≤—É—á–∏—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
‚úÖ –ü–µ—Ä–µ–¥–∞–µ—Ç –∫–∞–∂–¥—ã–π –æ—Ç—Ç–µ–Ω–æ–∫ —Å–º—ã—Å–ª–∞ –∏ —ç–º–æ—Ü–∏–π
‚úÖ –°–æ–±–ª—é–¥–∞–µ—Ç –≤—Å–µ –Ω–æ—Ä–º—ã —Ä—É—Å—Å–∫–æ–π –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∏ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–∏
‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—É—é –ª–µ–∫—Å–∏–∫—É
‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä —Ä–µ—á–∏ (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π/–±—ã—Ç–æ–≤–æ–π/–º–æ–ª–æ–¥–µ–∂–Ω—ã–π)
‚úÖ –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –Ω–µ–º–µ—Ü–∫–∏–µ —Ä–µ–∞–ª–∏–∏ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —á–∏—Ç–∞—Ç–µ–ª—è

üß† –ú–´–°–õ–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–¶–ï–°–°:
1. –î–µ–∫–æ–¥–∏—Ä—É–π –≥–ª—É–±–∏–Ω–Ω—ã–π —Å–º—ã—Å–ª –Ω–µ–º–µ—Ü–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
2. –û–ø—Ä–µ–¥–µ–ª–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—É—é –∏–Ω—Ç–µ–Ω—Ü–∏—é –∞–≤—Ç–æ—Ä–∞
3. –ù–∞–π–¥–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã
4. –ü—Ä–æ–≤–µ—Ä—å –≥–∞—Ä–º–æ–Ω–∏—é –∏ –±–ª–∞–≥–æ–∑–≤—É—á–∏–µ
5. –£–±–µ–¥–∏—Å—å –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

‚ö° –¢–í–û–ô –ü–ï–†–ï–í–û–î –î–û–õ–ñ–ï–ù:
- –ß–∏—Ç–∞—Ç—å—Å—è –∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
- –ë—ã—Ç—å —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏ –≤—ã–≤–µ—Ä–µ–Ω–Ω—ã–º
- –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∞–≤—Ç–æ—Ä—Å–∫—É—é –∏–Ω—Ç–æ–Ω–∞—Ü–∏—é
- –ó–≤—É—á–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –∂–∏–≤–æ

–í–´–í–ï–î–ò –¢–û–õ–¨–ö–û –ò–î–ï–ê–õ–¨–ù–´–ô –†–£–°–°–ö–ò–ô –ü–ï–†–ï–í–û–î!

–†–£–°–°–ö–ò–ô –ü–ï–†–ï–í–û–î:"""
        
        messages = [{"role": "user", "content": prompt}]
        
        models = ["gpt-3.5-turbo", "gpt-4", "gpt-4o-mini"]
        
        futures = []
        for model in models:
            future = self.executor.submit(self.try_model, model, messages)
            futures.append(future)

        for future in as_completed(futures, timeout=20):
            try:
                result = future.result()
                if result and len(result) > 5: 
                    self.save_to_cache(text, 'de_to_ru', result)
                    return result
            except Exception:
                continue
        
        try:
            response = g4f.ChatCompletion.create(
                model="gpt-4",
                messages=[{
                    "role": "system",
                    "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –Ω–µ–º–µ—Ü–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –î–µ–ª–∞–π —Ç–æ—á–Ω—ã–µ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã."
                }, {
                    "role": "user", 
                    "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π: {text}"
                }]
            )
            result = response.strip() if response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
            self.save_to_cache(text, 'de_to_ru', result)
            return result
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {str(e)}"
    
    def detect_language(self, text):
        cyrillic_count = sum(1 for char in text if '\u0400' <= char <= '\u04FF')
        german_chars = ['√§', '√∂', '√º', '√ü', '√Ñ', '√ñ', '√ú']
        german_count = sum(1 for char in text if char in german_chars)
        
        if cyrillic_count > 0:
            return 'ru'
        elif german_count > 0 or any(word in text.lower() for word in ['der', 'die', 'das', 'und', 'ich', 'ist', 'ein', 'eine']):
            return 'de'
        else:
            return 'unknown'
    
    def auto_translate(self, text):
        lang = self.detect_language(text)
        
        if lang == 'ru':
            return self.translate_ru_to_de(text), 'ru_to_de'
        elif lang == 'de':
            return self.translate_de_to_ru(text), 'de_to_ru'
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:")
            print("1 - –†—É—Å—Å–∫–∏–π -> –ù–µ–º–µ—Ü–∫–∏–π")
            print("2 - –ù–µ–º–µ—Ü–∫–∏–π -> –†—É—Å—Å–∫–∏–π")
            choice = input("–í–∞—à –≤—ã–±–æ—Ä (1/2): ").strip()
            
            if choice == '1':
                return self.translate_ru_to_de(text), 'ru_to_de'
            elif choice == '2':
                return self.translate_de_to_ru(text), 'de_to_ru'
            else:
                return "–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.", None

def main():
    translator = Russian_German_Translator()
    
    while True:
        try:
            text = input("\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç: ").strip()

            if not text:
                continue

            translation, direction = translator.auto_translate(text)
            
            if direction:
                print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {translation}")
            else:
                print(translation)
            
        except KeyboardInterrupt:
            translator.executor.shutdown(wait=True)
            break
        except Exception as e:
            print(f"\n[ERROR] > {str(e)}")
            time.sleep(10)

if __name__ == "__main__":
    main()
